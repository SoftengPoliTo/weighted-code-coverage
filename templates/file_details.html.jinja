<!DOCTYPE html>
<html class="has-navbar-fixed-top" data-theme="light">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta id="chartData" not-complex-cyclomatic="{{ not_complex_cyclomatic }}"
    complex-cyclomatic="{{ complex_cyclomatic }}" not-complex-cognitive="{{ not_complex_cognitive }}"
    complex-cognitive="{{ complex_cognitive }}" />
  <title>WCC - {{ file.name }}</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.0/css/bulma.min.css" />
  <script src="https://use.fontawesome.com/releases/v6.5.1/js/all.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://unpkg.com/@popperjs/core@2"></script>
  <script src="https://unpkg.com/tippy.js@6"></script>
  <style>
    {% include 'style.css' %}
  </style>
</head>

<body>
  {% include 'navbar.html' %}

  <div class="columns is-variable is-2 m-1 is-multiline">
    <!-- Analysis parameters -->
    <div class="column">
      <div class="card">
        <div class="card-content">
          <p class="title is-5">Analysis parameterers</p>
          <div class="level is-mobile mb-2">
            <p class="level-left has-text-grey no-wrap">File</p>
            <p class="level-right has-text-weight-medium">{{ file.name }}</p>
          </div>
          <div class="level is-mobile mb-2">
            <p id="mode" class="level-left has-text-grey no-wrap pointer">Mode</p>
            <p class="level-right has-text-weight-medium">Functions</p>
          </div>
          <div class="level is-mobile">
            <p id="complexity-type" class="level-left has-text-grey no-wrap pointer">Complexity</p>
            <p class="cyclomatic level-right has-text-weight-medium">Cyclomatic</p>
            <p class="cognitive is-hidden level-right has-text-weight-medium">Cognitive</p>
          </div>
        </div>
      </div>
    </div>
    <!-- Thresholds -->
    <div class="column">
      <div class="card">
        <div class="card-content">
          <p id="thresholds" class="title is-5 no-wrap is-inline-block pointer">Thresholds</p>
          <div class="fixed-grid has-3-cols">
            <div class="grid grid-gap">
              <div class="cell has-text-grey">Coverage</div>
              <div class="cell is-col-start-2 has-text-right has-text-weight-medium">&ge;</div>
              <div class="cell has-text-right has-text-weight-medium">60.0&percnt;</div>
              <div class="cell has-text-grey ir-row-start-2">Wcc</div>
              <div class="cell is-col-start-2 has-text-right has-text-weight-medium">&ge;</div>
              <div class="cell has-text-right has-text-weight-medium">{{ thresholds.wcc }}&percnt;</div>
              <div class="cell has-text-grey ir-row-start-3">CRAP</div>
              <div class="cell is-col-start-2 has-text-right has-text-weight-medium">&le;</div>
              <div class="cyclomatic cell has-text-right has-text-weight-medium">{{ thresholds.crap_cyclomatic }}
              </div>
              <div class="cognitive is-hidden cell has-text-right has-text-weight-medium">{{
                thresholds.crap_cognitive }}</div>
              <div class="cell has-text-grey ir-row-start-4">Skunk</div>
              <div class="cell is-col-start-2 has-text-right has-text-weight-medium">&le;</div>
              <div class="cyclomatic cell has-text-right has-text-weight-medium">{{ thresholds.skunk_cyclomatic }}
              </div>
              <div class="cognitive is-hidden cell has-text-right has-text-weight-medium">{{
                thresholds.skunk_cognitive }}</div>
            </div>
          </div>

        </div>
      </div>
    </div>
    <!-- File -->
    <div class="column">
      <div class="card">
        <div class="card-content">
          <p class="title is-5">File</p>
          <div class="level is-mobile mb-4">
            <p id="file-complexity" class="level-left has-text-grey pointer">Complexity</p>
            <p class="cyclomatic level-right has-text-weight-medium">{{ file.metrics.cyclomatic.complexity }}</p>
            <p class="cognitive is-hidden level-right has-text-weight-medium">{{ file.metrics.cognitive.complexity }}
            </p>
          </div>
          <div class="columns is-vcentered is-flex-mobile">
            <div class="column card-row">
              <p class="has-text-grey has-text-left">Coverage</p>
            </div>
            <div class="column card-row">
              <div class="progress-wrapper">
                <progress
                  class="progress is-medium mb-0 {% if file.metrics.coverage < 60 %}is-danger{% else %}is-success{% endif %}"
                  value="{{ file.metrics.coverage }}" max="100">
                  {{ file.metrics.coverage }}&percnt;
                </progress>
                <p class="progress-value has-text-grey-dark">
                  {{ file.metrics.coverage }}&percnt;
                </p>
              </div>
            </div>
          </div>

          <div class="columns is-vcentered is-flex-mobile mb-1">
            <div class="column card-row">
              <p class="has-text-grey has-text-left">Wcc</p>
            </div>
            <div class="column card-row">
              <div class="cyclomatic progress-wrapper">
                <progress
                  class="progress is-medium mb-0 {% if file.metrics.cyclomatic.wcc < thresholds.wcc %}is-danger{% else %}is-success{% endif %}"
                  value="{{ file.metrics.cyclomatic.wcc }}" max="100">
                  {{ file.metrics.cyclomatic.wcc }}%
                </progress>
                <p class="progress-value has-text-grey-dark">
                  {{ file.metrics.cyclomatic.wcc }}%
                </p>
              </div>
              <div class="cognitive is-hidden progress-wrapper">
                <progress
                  class="progress is-medium mb-0 {% if file.metrics.cognitive.wcc < thresholds.wcc %}is-danger{% else %}is-success{% endif %}"
                  value="{{ file.metrics.cognitive.wcc }}" max="100">
                  {{ file.metrics.cognitive.wcc }}%
                </progress>
                <p class="progress-value has-text-grey-dark">
                  {{ file.metrics.cognitive.wcc }}%
                </p>
              </div>
            </div>
          </div>
          <div class="level is-mobile mb-2">
            <p class="level-left has-text-grey">CRAP</p>
            <p
              class="cyclomatic level-right has-text-weight-medium {% if file.metrics.cyclomatic.crap > thresholds.crap_cyclomatic %}has-text-danger{% else %}has-text-success{% endif %}">
              {{ file.metrics.cyclomatic.crap }}</p>
            <p
              class="cognitive is-hidden level-right has-text-weight-medium {% if file.metrics.cognitive.crap > thresholds.crap_cognitive %}has-text-danger{% else %}has-text-success{% endif %}">
              {{ file.metrics.cognitive.crap }}</p>
          </div>
          <div class="level is-mobile mb-2">
            <p class="level-left has-text-grey">Skunk</p>
            <p
              class="cyclomatic level-right has-text-weight-medium {% if file.metrics.cyclomatic.skunk > thresholds.skunk_cyclomatic %}has-text-danger{% else %}has-text-success{% endif %}">
              {{ file.metrics.cyclomatic.skunk }}</p>
            <p
              class="cognitive is-hidden level-right has-text-weight-medium {% if file.metrics.cognitive.skunk > thresholds.skunk_cognitive %}has-text-danger{% else %}has-text-success{% endif %}">
              {{ file.metrics.cognitive.skunk }}</p>
          </div>
        </div>
      </div>
    </div>
    <!-- Functions chart -->
    <div class="column is-full is-one-third-widescreen">
      <div class="card">
        <div class="card-content">
          <p class="title is-5">Functions</p>
          <div class="is-flex is-align-items-center is-justify-content-center" style="height: 160px">
            <canvas id="chart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Table -->
  <div class="card mx-4 mb-4">
    <div class="card-content">
      <div class="table-container">
        <table class="table is-fullwidth">
          <thead>
            <tr>
              <th>
                <h6 id="function" class="title is-6 no-wrap is-inline-block pointer">Function</h6>
              </th>
              <th class="has-text-centered">
                <h6 class="title is-6 no-wrap">Complexity</h6>
              </th>
              <th class="has-text-centered">
                <h6 class="title is-6 no-wrap">Coverage</h6>
              </th>
              <th class="has-text-centered">
                <h6 class="title is-6 no-wrap wcc is-inline-block pointer">Wcc</h6>
              </th>
              <th class="has-text-centered">
                <h6 class="title is-6 no-wrap crap is-inline-block pointer">CRAP</h6>
              </th>
              <th class="has-text-centered">
                <h6 class="title is-6 no-wrap skunk is-inline-block pointer">Skunk</h6>
              </th>
            </tr>
          </thead>
          <tbody>
            {% for function in file.functions %}
            <tr
              class="cyclomatic {% if function.metrics.cyclomatic.is_complex %}complex{% else %}not-complex{% endif %}">
              <td class="is-vcentered">
                <span>{{ function.name }}</span>
              </td>
              <td class="has-text-centered is-vcentered">
                {{ function.metrics.cyclomatic.complexity }}
              </td>

              <td class="has-text-centered is-vcentered is-hidden-touch">
                <div class="progress-wrapper">
                  <progress
                    class="progress is-medium mb-0 {% if function.metrics.coverage < 60 %}is-danger{% else %}is-success{% endif %}"
                    value="{{ function.metrics.coverage }}" max="100">
                    {{ function.metrics.coverage }}%
                  </progress>
                  <p class="progress-value has-text-grey-dark">
                    {{ function.metrics.coverage }}%
                  </p>
                </div>
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-hidden-desktop is-vcentered {% if function.metrics.cyclomatic.wcc < thresholds.wcc %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.coverage }}%
              </td>

              <td class="has-text-centered is-vcentered is-hidden-touch">
                <div class="progress-wrapper">
                  <progress
                    class="progress is-medium mb-0 {% if function.metrics.cyclomatic.wcc < thresholds.wcc %}is-danger{% else %}is-success{% endif %}"
                    value="{{ function.metrics.cyclomatic.wcc }}" max="100">
                    {{ function.metrics.cyclomatic.wcc }}%
                  </progress>
                  <p class="progress-value has-text-grey-dark">
                    {{ function.metrics.cyclomatic.wcc }}%
                  </p>
                </div>
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-hidden-desktop is-vcentered {% if function.metrics.cyclomatic.wcc < thresholds.wcc %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cyclomatic.wcc }}%
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-vcentered {% if function.metrics.cyclomatic.crap > thresholds.crap_cyclomatic %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cyclomatic.crap }}
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-vcentered {% if function.metrics.cyclomatic.skunk > thresholds.skunk_cyclomatic %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cyclomatic.skunk }}
              </td>
            </tr>
            <tr
              class="cognitive is-hidden {% if function.metrics.cognitive.is_complex %}complex{% else %}not-complex{% endif %}">
              <td class="is-vcentered">
                <span>{{ function.name }}</span>
              </td>
              <td class="has-text-centered is-vcentered">
                {{ function.metrics.cognitive.complexity }}
              </td>

              <td class="has-text-centered is-vcentered is-hidden-touch">
                <div class="progress-wrapper">
                  <progress
                    class="progress is-medium mb-0 {% if function.metrics.coverage < 60 %}is-danger{% else %}is-success{% endif %}"
                    value="{{ function.metrics.coverage }}" max="100">
                    {{ function.metrics.coverage }}%
                  </progress>
                  <p class="progress-value has-text-grey-dark">
                    {{ function.metrics.coverage }}%
                  </p>
                </div>
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-hidden-desktop is-vcentered {% if function.metrics.cyclomatic.wcc < thresholds.wcc %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.coverage }}%
              </td>

              <td class="has-text-centered is-vcentered is-hidden-touch">
                <div class="progress-wrapper">
                  <progress
                    class="progress is-medium mb-0 {% if function.metrics.cognitive.wcc < thresholds.wcc %}is-danger{% else %}is-success{% endif %}"
                    value="{{ function.metrics.cognitive.wcc }}" max="100">
                    {{ function.metrics.cognitive.wcc }}%
                  </progress>
                  <p class="progress-value has-text-grey-dark">
                    {{ function.metrics.cognitive.wcc }}%
                  </p>
                </div>
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-hidden-desktop is-vcentered {% if function.metrics.cognitive.wcc < thresholds.wcc %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cognitive.wcc }}%
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-vcentered {% if function.metrics.cognitive.crap > thresholds.crap_cognitive %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cognitive.crap }}
              </td>
              <td
                class="has-text-weight-medium has-text-centered is-vcentered {% if function.metrics.cognitive.skunk > thresholds.skunk_cognitive %}has-text-danger{% else %}has-text-success{% endif %}">
                {{ function.metrics.cognitive.skunk }}
              </td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</body>

</html>

<script>
  // Tooltips
  {% include 'tooltips.js' %}

  tippy('#function', {
    content: 'A <b>function</b> is considered complex if at least one of the following apply: <b>Wcc</b> below threshold, <b>CRAP</b> or <b>Skunk</b> above threshold. The numbers in brackets are function start and end line.',
    allowHTML: true
  });

  // Chart data passed with minijinja.
  const chartData = document.getElementById("chartData");
  const notComplexCyclomatic = chartData.getAttribute("not-complex-cyclomatic");
  const complexCyclomatic = chartData.getAttribute("complex-cyclomatic");
  const notComplexCognitive = chartData.getAttribute("not-complex-cognitive");
  const complexCognitive = chartData.getAttribute("complex-cognitive");

  // Chart setup
  const data = {
    labels: ["Not complex", "Complex"],
    datasets: [
      {
        data: [notComplexCyclomatic, complexCyclomatic],
        borderWidth: 4,
        backgroundColor: ["#50C48C", "#F8446C"],
      },
    ],
  };

  // Chart config
  const config = {
    type: "doughnut",
    data,
    options: {
      aspectRatio: 2,
      borderRadius: 7,
      cutout: "80%",
      plugins: {
        legend: {
          position: "right",
          labels: {
            usePointStyle: true,
            pointStyle: "rectRounded",
          },
        },
        tooltip: {
          animation: false,
          usePointStyle: true,
          boxPadding: 4,
          callbacks: {
            labelPointStyle: function (context) {
              return {
                pointStyle: "rectRounded",
                rotation: 0,
              };
            },
          },
        },
      },
    },
  };

  // Chart render
  const chart = new Chart(document.getElementById("chart"), config);

  {% include 'complexity.js' %}
</script>